====================================================================================================================================================
Variabe Mutation and Type Coercion
----------------------------------------------------------------------------------------------------------------------------------------------------
Varibale Mutation   :   
        An immutable value is one that, once created, can never be changed. In JavaScript, primitive values such as numbers, strings and booleans are always immutable. However, data structures like objects and arrays are not. By mutation I mean changing or affecting a source element.

Type Coercion   :   
        Type coercion is the process of converting value from one type to another (such as string to number, object to boolean, and so on). Any type, be it primitive or an object, is a valid subject for type coercion. To recall, primitives are: number, string, boolean, null, undefined + Symbol (added in ES6).

====================================================================================================================================================
Shallow Copy vs Deep Copy : 
----------------------------------------------------------------------------------------------------------------------------------------------------
    Shallow Copy   :   only copies the references to variables/objects/Arrays
    Deep Copy      :   creates a complete brand new copy of your array
====================================================================================================================================================

-> Input Prompt

-> Operator Precedence  :   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

====================================================================================================================================================
Function expression vs Function decleration : 
----------------------------------------------------------------------------------------------------------------------------------------------------
    function decleration    :   function whatDoYouDo(job, firstName){}
    function expression     :   var whatDoYouDo = funtion(job, firstName){}


====================================================================================================================================================
Falsy values vs Truthy values
----------------------------------------------------------------------------------------------------------------------------------------------------
Falsy values    : undefined, null, 0 , NaN
Truthy values   : all those which are NOT Falsy values


====================================================================================================================================================
Expressions vs Statements
----------------------------------------------------------------------------------------------------------------------------------------------------
Expressions     :   always produces a result
Statements      :   do not produce any immediate value until they are called



-> Hoisting : All the variables will be assigned as undefined initally


====================================================================================================================================================
Method Borrowing 
    syntax :    sourceObj._functionName_.call(targetObj, _inputParams_)
----------------------------------------------------------------------------------------------------------------------------------------------------
    Example:
            var objA = {
                name: "object A",
                say: function(greet) {
                    alert(greet + ", " + this.name);
                }
            }

            objA.say("Hi"); // Displays: Hi, object A

            var objB = {
                name: "object B"
            }

            /* The objB doesn't have say() method, but it can borrow it from objA */
            objA.say.call(objB, "Hello"); // Displays: Hello, object B
====================================================================================================================================================


==> Everything in javascript is an object (Almost Everything)
    -> Except Primitives everything else in javascript is an object
    
    -> Primitives :
        - Numbers
        - Strings
        - Booleans
        - Undefined
        - Null

    -> Everything else :
        - Arrays
        - Functions
        - Object
        - Dates 
        - Wrapper for Numbers, Strings, Booleans
====================================================================================================================================================
Constructor : 
----------------------------------------------------------------------------------------------------------------------------------------------------
In the example, function Person() is an object constructor function.
-> Objects of the same type are created by calling the constructor function with the new keyword:
-> In javascript a constructor is same or similar to class in other OOP languages
-> A function constructor name usually starts with a CAPITAL LETTER so that it can be easily distinguishable from other functions
-> While creating objects of function constructor we use new keyword
-> The new keyword will first create an empty object first and sets the this keyword on this object 

    Example
        function Person(first, last, age, eye) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.eyeColor = eye;
        }

        var myFather = new Person("John", "Doe", 50, "blue");
        var myMother = new Person("Sally", "Rally", 48, "green");
====================================================================================================================================================


-> Every Object has a property called 'Prototype'
-> In order for an object to inhert a method or properties, the parent class has to add it to it's own Prototype property so that clid instances can inherit it
-> The constructor's prototype property is NOT the prototype of the constructor itself, but the prototype of all the instances created through it


====================================================================================================================================================
Prototype chaining : 
----------------------------------------------------------------------------------------------------------------------------------------------------
    - johnObject is an instance of Person constructor
    - so the Prototype chain will be as  below

    johnObject -> PersonObject -> Object Object -> null

    - Whenever a method is called on johnObject, interpreter will look for that object on johnObject's prototype property
    - If it couldn't find it there it will go up in the prototype chain and look there, in this case Person's prototype
    - It will continue to look for that object in the prototype chain until it finds that method or null 
    - Object Object is the only Object having null in its prototype property 
====================================================================================================================================================

-> console.info() : We will get that object's complete info
    eg : x = [1, 2, 3]; console.log(x) will only give values 1, 2, 3
        console.info(x) will print all the information including its prototype information


====================================================================================================================================================
Objects vs Primitives vs Functions
----------------------------------------------------------------------------------------------------------------------------------------------------
    -> Primitives store data assigend to them inside them
    -> Objects just hold a reference to where the data is stored

    eg: 
    // Primitives
            var a = 23;
            var b = a;
            a = 46;
            console.log(a); //prints 46
            console.log(b); // prints 23 as it just  copied the value of a not its reference



    // Objects
            var obj1 = {
                name: 'John',
                age: 26
            };
            var obj2 = obj1;
            obj1.age = 30;
            console.log(obj1.age); // prints 30
            console.log(obj2.age); // prints 30 as it copied the reference of obj1 and not its value

    //Functions
    -> A function is an instance of an Object type;
    -> A function behaves like any other Object
    -> We can store function in a variable
    -> We can pass function as an argument to another function
    -> We can also return a function from a function
====================================================================================================================================================




-> Immediately Invoked Function Expressions
-> Closures
-> Modules
-> Key Codes
-> DRY principle - Don't repeat yourself principle

====================================================================================================================================================
Notice the difference between insetAdjacentHTML, insetAdjacentElement while adding html list items


Event Delegation :
    Event Bubbling : When an event is triggered on an element, the same event is triggered on all of its parent elements all the way upto html element
    Target Element : The actual element where the event is first triggered
    Event Delegation : Not set up th handler on original element but to attach it to parent element and handle there and catch it at parent element
                        and then do whaterver we want to do on the target element

USes of event Delegation:
1. When we have an element with lots of child elements that we are instered in,
2. When we want an event handler attached to an element that is not yet  in the DOM when our page is loaded
====================================================================================================================================================
ES5 and ES6

Let vs Const 
    -   Constants are immutable
    -   variables declared with Let are mutable

    -   variables declared with var are function scoped in ES5
    -   Variables declared with let, const and var are blocked scoopes in ES6 

    -   In ES6 variables cannot be used before declaration


Strings 
    1. Template literals -> `
    
    Example :
    var firstName = 'John'
    var lastName = 'Smith'
    console.log(`His name is ${firstName} {lastName}`)

    2. New String methods
    StringVariable.startsWith('searchCondition')
                  .endsWith('')
                  .includes('')
                  .repeat(/)


Arrow Functions
    -   By using arrpw functions we can use this keyword, which is not available in normal functions

Destructuring   
    Example 
        const [name, age] = ['John', 25];
        console.log(name);
        console.log(age);

    => Also works the same way with Objects
    Example 
        const Obj = {
            firstname : 'John',
            lastname : "Smith'
        };

        const {firstName, lastName} = Obj

    
Arrays 
    - In ES5 if we have to convert a nodeList into array we have to call Array.prototype.slice.call(nodeList)
    - In ES6 we can simply use Array.from(nodeList) 

    - New Loops "For of" and "For in"


Spread Operator 
const a = [1,2,3];
let b = [...a, 4, 5, 6]
console.log(b) // Result [1, 2, 3, 4, 5, 6]


Rest Parameters


Default Parameters

MAP
- Until ES6 we have to use Objects
- in maps we can use anything for a key
- Objects are restricted to strings
- We can loop maps which we can not do with Objects
Ex :
    cont question = new Map()
    question.set(key, value)
    question.get(key)
    question.size()
    question.delete(key)
    question.clear()
    question.has()
    question.forEach()

Classes
- Newly added in ES6
- Similar to JAVA(My opinion)



---------------------------- End of ES 6---------------------------- 

Asynchronous JavaScript :
    - Synchronous Script : Instructions are executed one by one in order of writing
    
Promises :
    States :-
        1. Pending - Before event happens
        2. Settled - After event happens
        3. Fulfilled - Result is available
        4. Rejected - Error occured

    - We can produce and consume promises
    - Inside a promise we have call back function called "Executor function"


Async and Await :
    - Used to consume promises
    - Code written inside aync function runs in the backfround
    - Await can only be used inside an async function
    - We can not return in async function
    - But if we have to  write return in async then one way to do is :
        Async function always automatically returns a resolved value so we can invoke (dot).then method where the async funtion is called


AJAX, API : 
    - Asynchronous JavaScript And Xml
        ~ (Sending https requests and receiving responses from API) js app running on client 

    - Application Programming Interface
        ~ Piece of software on server which receives requests and sends back responses to js app

    - Cross Origin Resource Policy COROS:


Webpack : 
    - In webpack there are four concepts:
        ~ Entry point
        ~ Output  
        ~ Loaders 
        ~ Plugins
		
		
 Commands : We generally insert webpack commands inside scripts of package.json 
 
     "dev": "webpack --mode development",
    "build": "webpack --mode production",
	
Above two commands will bundle the assets and saves them on to the disk

	
    "start": "webpack-dev-server --mode development --open"
 
 Webpack server is a server that will automatically loads after it dectects any changes in the files. When using this command webpack doesnot really save the bundled files on to the disc hence we cannot see any new files are to be created. Only the two commands will save the files to disc
 
 Babel :
 
 - Polyfill
 
 
 Axios : Https library